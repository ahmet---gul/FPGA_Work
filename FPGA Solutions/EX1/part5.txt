LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY part5 IS 
	PORT (	SW 	: IN	STD_LOGIC_VECTOR(9 DOWNTO 0);
				HEX0,HEX1,HEX2	: OUT	STD_LOGIC_VECTOR(0 TO 6));
END part5;

ARCHITECTURE Behavior OF part5 IS
	COMPONENT mux_2bit_3to1 --mux fonksiyonu prototipi
		PORT (	S, U, V, W	: IN 	STD_LOGIC_VECTOR(1 DOWNTO 0); --fonksiyon deðiþkenleri
					M						: OUT STD_LOGIC_VECTOR(1 DOWNTO 0));
	END COMPONENT;
	COMPONENT char_7seg --char_7seg prototipi, display ediyor
		PORT (	C			: IN 	STD_LOGIC_VECTOR(1 DOWNTO 0); 
					Display	: OUT STD_LOGIC_VECTOR(0 TO 6));
	END COMPONENT;
	SIGNAL Ch_Sel, Ch1, Ch2, Ch3: STD_LOGIC_VECTOR(1 DOWNTO 0); --switchlere gelecek sinyaller
	SIGNAL H2_Ch, H1_Ch, H0_Ch : STD_LOGIC_VECTOR(1 DOWNTO 0); --mux çýkýþlarý
BEGIN
	Ch_Sel <= SW(9 DOWNTO 8); --switch atamalarý sinyallere
	Ch1 <= SW(5 DOWNTO 4);
	Ch2 <= SW(3 DOWNTO 2);
	Ch3 <= SW(1 DOWNTO 0);
	
	M2: mux_2bit_3to1 PORT MAP(Ch_Sel,Ch1,Ch2,Ch3,H2_Ch); --mux fonksiyon çaðýrýmlarý
	M1: mux_2bit_3to1 PORT MAP(Ch_Sel,Ch2,Ch3,Ch1,H1_Ch);
	M0: mux_2bit_3to1 PORT MAP(Ch_Sel,Ch3,Ch1,Ch2,H0_Ch);
	
	H0: char_7seg PORT MAP (H0_Ch, HEX0); --mux çýkýþlarý hex'lere gönderiliyor
	H1: char_7seg PORT MAP (H1_Ch, HEX1);
	H2: char_7seg PORT MAP (H2_Ch, HEX2);
END Behavior;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

-- implements a 2-bit wide 3-to-1 multiplexer
ENTITY mux_2bit_3to1 IS
	PORT (	S, U, V, W	: IN 	STD_LOGIC_VECTOR(1 DOWNTO 0);
				M						: OUT STD_LOGIC_VECTOR(1 DOWNTO 0));
END mux_2bit_3to1;

ARCHITECTURE Behavior OF mux_2bit_3to1 IS
	SIGNAL m_0, m_1 : STD_LOGIC; -- intermediate multiplexers
BEGIN
	-- 3-to-1 multiplexer for bit 0
	m_0 <= (NOT(S(0)) AND U(0)) OR (S(0) AND V(0));	
	M(0) <= (NOT(S(1)) AND m_0) OR (S(1) AND W(0)); -- 3-to-1 multiplexer output

	-- 3-to-1 multiplexer for bit 1
	m_1 <= (NOT(S(0)) AND U(1)) OR (S(0) AND V(1));
	M(1) <= (NOT(S(1)) AND m_1) OR (S(1) AND W(1)); -- 3-to-1 multiplexer output
END Behavior;	

LIBRARY ieee;
USE ieee.std_logic_1164.all;

-- Converts 2-bit input code on C1-0 into 7-bit code that produces
-- a character on a 7-segment display. The conversion is defined by:
-- 	 C  1 0		Char
-- 	----------------
-- 	    0 0  	'd'
-- 		0 1		'E'
-- 		1 0 	'0'
-- 		1 1		' ' blank
--
--
--
ENTITY char_7seg IS
	PORT (	C			: IN 	STD_LOGIC_VECTOR(1 DOWNTO 0);
				Display	: OUT STD_LOGIC_VECTOR(0 TO 6));
END char_7seg;
	--
	--       0  
	--      ---  
	--     |   |
	--    5|   |1
	--     | 6 |
	--      ---  
	--     |   |
	--    4|   |2
	--     |   |
	--      ---  
	--       3  
	--
ARCHITECTURE Behavior OF char_7seg IS
BEGIN
	-- the following equations describe display functions in (inverted) cannonical SOP form
	Display(0) <= (NOT(C(1)) AND NOT(C(0))) OR (C(1) AND C(0));
	Display(1) <= C(0); 
	Display(2) <= C(0); 
	Display(3) <= C(1) AND C(0);  
	Display(4) <= C(1) AND C(0); 
	Display(5) <= (NOT(C(1)) AND NOT(C(0))) OR (C(1) AND C(0)); 
	Display(6) <= C(1);	
END Behavior;
